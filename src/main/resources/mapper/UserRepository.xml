<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lec.spring.repository.UserRepository">

    <sql id="SELECT_BASE">
        SELECT
            user_uid,
            user_id,                <!-- User 의 setter -->
            user_name,
            user_pw,
            user_addr1,
            user_addr2,
            user_addr3,
            user_email,
            user_phone
        FROM
            tb_user
    </sql>

    <select id="findById" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        WHERE
        user_uid = #{param1}     <!-- UserRepository 첫번째 매개변수(1개일때 가능)-->
    </select>

    <select id="findByUsername" resultType="com.lec.spring.domain.User">
        <include refid="SELECT_BASE"/>
        WHERE
        user_id = #{param1}
    </select>
                    <!-- ↓ DML 시에는 가급적이면 flushCache true(사용안한다는 의미)-->
    <insert id="save" flushCache="true" parameterType="com.lec.spring.domain.User"
            keyProperty="user_uid" useGeneratedKeys="true" keyColumn="user_uid"> <!-- 자동 생성된 키값을 가져온다(useGeneratedKeys true). 자동 생성된 키 값은 db에 어디? user_id column(keyColumn="user_id")( 매개변수 받은 User에, set호출을 통하여, 데이터베이스의 user_id 컬럼을-->
        INSERT INTO tb_user(user_id, user_pw, user_name, user_addr1, user_addr2, user_addr3, user_email, user_phone)    <!-- 테이블의 필드 -->
        VALUE(#{user_id}, #{user_pw}, #{user_name}, #{user_addr1}, #{user_addr2}, #{user_addr3}, #{user_email}, #{user_phone}) <!-- User 객체의 getter 값 -->
    </insert>

    <update id="update" flushCache="true" parameterType="com.lec.spring.domain.User">
        UPDATE tb_user SET user_id = #{user_id}, user_pw = #{user_pw}, user_name = #{user_name}
        WHERE user_id = #{user}
    </update>
</mapper>